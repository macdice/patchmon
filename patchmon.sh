#!/bin/sh
#
# A stupid script to email me whenever PostgreSQL patches that I've
# shared publicly or am reviewing don't apply on top of 'master'
# anymore.  I just have to remember to drop patches to be monitored
# into a 'patches' directory.
#
# Tries to apply all patches matching *.patch in the PATCHES directory,
# on their own, and tries to apply all patches together in lexicographical
# order that appear in directories called *.patchset.
#
# If it all works, then say nothing.  If it fails, then print out complaints
# so that an email is generated by cron just in time for my morning coffee.
#
# TODO: Teach this how to deal with URLs, the commitfest app, ...?
#
# TODO: Build, install, test?
#
# TODO: Skip testing if the git repo hasn't moved since last time?
#
# TODO: Support git-am?

# The place where *.patch files and *.patchset directories live
PATCHES=$HOME/patches

# The place where postgresql is checked out
WORKING_DIR=$HOME/patches/postgresql

# Pull upstream changines to master branch
cd $WORKING_DIR
git checkout . > /dev/null
git clean -fd > /dev/null
git pull > /dev/null

# Find all patches named *.patch:
for patch in $(find $PATCHES -maxdepth 1 -name '*.patch' -print) ; do
  # for single patches we can use dry run
  patch --silent --dry-run -p1 < "$patch" || echo "Failed to apply $patch"
done

# Find all patch sets named *.patchset:
for patchset in $(find $PATCHES -maxdepth 1 -name '*.patchset' -print) ; do
  # for patchsets we'll need to clean up junk each for each patchset
  git checkout . > /dev/null
  git clean -fd > /dev/null
  for patch in $patchset/*.patch ; do
    patch --silent -p1 < "$patch" || echo "Failed to apply $patch"
  done
done
